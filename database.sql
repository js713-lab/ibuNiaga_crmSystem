CREATE DATABASE IF NOT EXISTS ibuniaga;
USE ibuniaga;

-- Helper function to generate formatted user IDs
DELIMITER //
CREATE FUNCTION generate_user_id(role_prefix CHAR(1), last_number INT) 
RETURNS VARCHAR(10)
DETERMINISTIC
BEGIN
    RETURN CONCAT(role_prefix, LPAD(last_number, 4, '0'));
END //
DELIMITER ;

-- Users table with auto-incrementing ID sequence
CREATE TABLE user_sequences (
    role ENUM('user', 'admin', 'moderator') PRIMARY KEY,
    last_number INT NOT NULL DEFAULT 0
);

-- Insert initial sequence values
INSERT INTO user_sequences (role, last_number) VALUES 
('user', 0),
('admin', 0),
('moderator', 0);

-- Users table with role-based authentication
CREATE TABLE users (
    id VARCHAR(10) PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role ENUM('user', 'admin', 'moderator') NOT NULL DEFAULT 'user',
    joined_date DATE DEFAULT CURRENT_DATE,
    remember_token VARCHAR(64)
);

-- Trigger to auto-generate user IDs before insert
DELIMITER //
CREATE TRIGGER before_user_insert 
BEFORE INSERT ON users
FOR EACH ROW
BEGIN
    DECLARE prefix CHAR(1);
    DECLARE next_number INT;
    
    -- Get the appropriate prefix based on role
    SET prefix = CASE 
        WHEN NEW.role = 'user' THEN 'U'
        WHEN NEW.role = 'admin' THEN 'A'
        WHEN NEW.role = 'moderator' THEN 'M'
    END;
    
    -- Update sequence and get next number
    UPDATE user_sequences 
    SET last_number = last_number + 1 
    WHERE role = NEW.role;
    
    SELECT last_number INTO next_number 
    FROM user_sequences 
    WHERE role = NEW.role;
    
    -- Set the new ID
    SET NEW.id = generate_user_id(prefix, next_number);
END //
DELIMITER ;

-- Applications table for business submissions
CREATE TABLE applications (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id VARCHAR(10),
    name VARCHAR(100) NOT NULL,
    ic_number VARCHAR(12) NOT NULL,
    contact VARCHAR(15) NOT NULL,
    email VARCHAR(100) NOT NULL,
    business_type ENUM('retail', 'service', 'manufacturing', 'food', 'others') NOT NULL,
    business_duration ENUM('less_than_1', '1_to_3', '3_to_5', 'more_than_5') NOT NULL,
    status ENUM('submitted', 'pending', 'approved', 'rejected') DEFAULT 'submitted',
    submission_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    assigned_to VARCHAR(10),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (assigned_to) REFERENCES users(id)
);

-- Application Messages table for moderator feedback
CREATE TABLE application_messages (
    id INT AUTO_INCREMENT PRIMARY KEY,
    application_id INT,
    moderator_id VARCHAR(10),
    message TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (application_id) REFERENCES applications(id),
    FOREIGN KEY (moderator_id) REFERENCES users(id)
);

-- Inbox Messages table for system and moderator notifications
CREATE TABLE inbox (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id VARCHAR(10),
    subject VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    from_type ENUM('system', 'moderator', 'admin') NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Notices table for public announcements
CREATE TABLE notices (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    created_by VARCHAR(10),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (created_by) REFERENCES users(id)
);

-- Audit Logs table for tracking user actions
CREATE TABLE audit_logs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id VARCHAR(10),
    action VARCHAR(50) NOT NULL,
    details TEXT,
    ip_address VARCHAR(45),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Insert initial users
-- The IDs will be auto-generated by the trigger
INSERT INTO users (username, password, role, joined_date) VALUES
('user1@', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'user', '2000-01-01'),
('user2@', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'user', '2000-01-01'),
('admin1@', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'admin', '2000-01-01'),
('mod1@', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'moderator', '2000-01-01'),
('mod2@', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'moderator', '2000-01-01');

-- Create indexes for better performance
CREATE INDEX idx_applications_user_id ON applications(user_id);
CREATE INDEX idx_applications_assigned_to ON applications(assigned_to);
CREATE INDEX idx_inbox_user_id ON inbox(user_id);
CREATE INDEX idx_audit_logs_user_id ON audit_logs(user_id);

-- Add status_message column to applications table
ALTER TABLE applications
ADD COLUMN status_message TEXT NULL DEFAULT NULL;
ADD COLUMN status_changed_date TIMESTAMP NULL DEFAULT NULL;
ADD COLUMN updated_by VARCHAR(10) NULL,
ADD FOREIGN KEY (updated_by) REFERENCES users(id);